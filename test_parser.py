from PacketParser import PacketParser

class TestParserTCP():
    raw_data = bytes.fromhex("005056e9042e000c2984865f0800450000341ffc400080060000c0a8dd807af9b4090501c8d53a684fdb0000000080022000cd520000020405b40103030801010402")
    parser = PacketParser()

    def test_mac_parsing(self):    
        header, data = self.parser.parse_Ethernet(self.raw_data)
        assert header.destination_MAC_address.to_string() == "00:50:56:e9:04:2e"
        assert header.source_MAC_address.to_string() == "00:0c:29:84:86:5f"
    
    def test_ip_address_parsing(self):
        eth_header, eth_data = self.parser.parse_Ethernet(self.raw_data)
        ip_header, data = self.parser.parse_IPv4(eth_data)
        assert ip_header.source_address.to_string() == "192.168.221.128"
        assert ip_header.destination_address.to_string() == "122.249.180.9"

class TestParserARP():
    raw_data = bytes.fromhex("9cb70d835732b486558cfa7608060001080006040001b486558cfa76c0a80801000000000000c0a80867")
    parser = PacketParser()

    def test_all(self):    
        h, data = self.parser.parse_Ethernet(self.raw_data)
        assert str(h.etherType) == "ARP"
        arp_header = self.parser.parse_ARP(data)[0]
        assert str(arp_header.hardware_type) == "Ethernet"
        assert str(arp_header.protocol_type) == "IPv4"
        assert int(arp_header.hw_addr_byte_len) == 6
        assert int(arp_header.proto_addr_byte_len) == 4
        assert int(arp_header.operation_code) == 1
        assert str(arp_header.hw_addr_sender) == "b4:86:55:8c:fa:76"
        assert str(arp_header.proto_addr_sender) == "192.168.8.1"
        assert str(arp_header.hw_addr_target) == "00:00:00:00:00:00"
        assert str(arp_header.proto_addr_target) == "192.168.8.103"
    
    def test_all_2(self):
        self.parser.parse(self.raw_data)

class TestICMPParser():
    raw_data = bytes.fromhex("b486558cfa769cb70d83573208004500005492a3400040018c09c0a8086757fafaf20800b03f6edb00012e37c85d00000000237c000000000000101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334353637")
    parser = PacketParser()

    def test_all(self):    
        h, data = self.parser.parse_Ethernet(self.raw_data)
        assert str(h.etherType) == "IPv4"
        ip_header, ip_data = self.parser.parse_IPv4(data)
        assert str(ip_header.protocol_type) == "ICMP"
        icmp_h, data = self.parser.parse_icmp(ip_data)
        assert str(icmp_h.type) == "Echo Request"


class TestDHCPParser():
    raw_data = bytes.fromhex("ffffffffffff000b8201fc4208004500012ca8360000fa11178b00000000ffffffff004400430118591f0101060000003d1d0000000000000000000000000000000000000000000b8201fc4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501013d0701000b8201fc4232040000000037040103062aff00000000000000")
    parser = PacketParser()

    def test_all(self):
        pass


class TestUDPParser():
    raw_data = bytes.fromhex("01005e7ffffa4c72b9b231e90800450003fb667f000001119e5cc0a80074effffffac4020e7603e7b50f3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d227574662d38223f3e3c736f61703a456e76656c6f706520786d6c6e733a736f61703d22687474703a2f2f7777772e77332e6f72672f323030332f30352f736f61702d656e76656c6f70652220786d6c6e733a7773613d22687474703a2f2f736368656d61732e786d6c736f61702e6f72672f77732f323030342f30382f61646472657373696e672220786d6c6e733a7773643d22687474703a2f2f736368656d61732e786d6c736f61702e6f72672f77732f323030352f30342f646973636f766572792220786d6c6e733a777364703d22687474703a2f2f736368656d61732e786d6c736f61702e6f72672f77732f323030362f30322f64657670726f662220786d6c6e733a7075623d22687474703a2f2f736368656d61732e6d6963726f736f66742e636f6d2f77696e646f77732f7075622f323030352f3037223e3c736f61703a4865616465723e3c7773613a546f3e75726e3a736368656d61732d786d6c736f61702d6f72673a77733a323030353a30343a646973636f766572793c2f7773613a546f3e3c7773613a416374696f6e3e687474703a2f2f736368656d61732e786d6c736f61702e6f72672f77732f323030352f30342f646973636f766572792f48656c6c6f3c2f7773613a416374696f6e3e3c7773613a4d65737361676549443e75726e3a757569643a34653936613065662d356537622d343535352d393637642d3535656438383931653162383c2f7773613a4d65737361676549443e3c7773643a41707053657175656e636520496e7374616e636549643d22353434222053657175656e636549643d2275726e3a757569643a63383635373531342d623131652d343437642d383331632d36636366346363316230336522204d6573736167654e756d6265723d223130223e3c2f7773643a41707053657175656e63653e3c2f736f61703a4865616465723e3c736f61703a426f64793e3c7773643a48656c6c6f3e3c7773613a456e64706f696e745265666572656e63653e3c7773613a416464726573733e75726e3a757569643a63646537613666342d383232632d346236632d393139642d6265316331383437306566623c2f7773613a416464726573733e3c2f7773613a456e64706f696e745265666572656e63653e3c7773643a54797065733e777364703a446576696365207075623a436f6d70757465723c2f7773643a54797065733e3c7773643a4d6574616461746156657273696f6e3e353c2f7773643a4d6574616461746156657273696f6e3e3c2f7773643a48656c6c6f3e3c2f736f61703a426f64793e3c2f736f61703a456e76656c6f70653e")
    parser = PacketParser()

    def test_all(self):    
        h, data = self.parser.parse_Ethernet(self.raw_data)
        assert str(h.etherType) == "IPv4"
        ip_header, ip_data = self.parser.parse_IPv4(data)
        assert str(ip_header.protocol_type) == "UDP"
        udp_h, data = self.parser.parse_udp(ip_data)
        assert udp_h.source_port == 50178
        assert udp_h.destination_port == 3702
        assert udp_h.length == 999